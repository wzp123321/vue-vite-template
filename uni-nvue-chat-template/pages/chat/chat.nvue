<template>
	<view>
		<uni-nav-bar :leftIconBool="true" @clickLeft="$store.state.user.utils.back()" left-icon="back" :fixed="true"
		 :status-bar="true" :title="navBarTitle" :moveRightBtn="isWxapp" background-color="#e3e3e3" :rightIconBool="true" rightIcon="more-filled"
		 @clickRight="more"></uni-nav-bar>
		<scroll-view :animation="scrollAnimationData" ref="scrollview" @click="hideKey" scroll-y="true" class="scroll-view" :style="chatBodyBottom"
		 :scroll-into-view="scrollIntoID" :scroll-with-animation="false">
			<!--  #ifdef  APP-NVUE -->
			<refresh class="refresh" @refresh="onrefresh" @pullingdown="onpullingdown" :display="refreshing ? 'show' : 'hide'">
				<text class="indicator-text">加载中 ...</text>
				<loading-indicator class="indicator"></loading-indicator>
			</refresh>
			<!--  #endif -->
			<view class="" v-for="(item,index) in msgList" :key="index" :id="'chatId_'+index">
				<uni-chat-detail :session="session" :list="msgList" :item="item" :index="index"></uni-chat-detail>
			</view>
			<text v-if="!webSocket.isOnline" class="system-msg">服务器已断开,尝试重新连接...</text>
		</scroll-view>

		<view ref="foot" :animation="footAnimationData" class="flex-column-center" :style="'bottom:'+ KeyboardHeight +'rpx;'">

			<view id="bottomfoot" class="bottom-foot-char flex-row-around" style="font-size: 55rpx;" ref="moreMenu" :animation="menuAnimationData">
				<!--  #ifndef  H5 -->
				<image class="tb-nv" :src="voice?'../../static/images/keyboard.png':'../../static/images/voice.png'" mode="aspectFit"
				 @click="switchVoice" style="margin-left: 20rpx;margin-right: 20rpx;"></image>
				<!--  #endif -->
				<input v-model="msg" :focus="focus" @focus="inputFocus" :confirm-hold="true" :adjust-position="false" class="dh-input"
				 type="text" @confirm="sendMsg" confirm-type="send" style="margin-right: 20rpx;" v-if="!voice" />
				<text style="margin-right: 20rpx;" @touchstart="voiceBegin" @touchmove.stop.prevent="voiceIng" @touchend="voiceEnd"
				 @touchcancel="voiceCancel" v-if="voice" class="voice-nv">{{voiceTis}}
				</text>
				<image @click="collapse" class="tb-nv" style="margin-right: 10rpx;" src="../../static/images/more.png" mode="aspectFill"></image>
				<view class="" style="flex-direction: row;margin-left: 50rpx;">
					<uni-icons @click="chooseImage" type="image" size="50" style="margin-right: 20rpx;"></uni-icons>
					<uni-icons @click="captureImage" type="camera" size="50"></uni-icons>
				</view>
			</view>
		</view>
		<view class="record" v-if="recording">
			<view class="ing">
				<image src="../../static/images/recording.gif" class="recording" mode="aspectFit"></image>
			</view>
			<view class="recordTis"><text class="recordTis-text">{{recordTis}}</text></view>
		</view>
		<view class="safeArea" :style="{ height: safeBottom + 'px'}">
		</view>
	</view>
</template>
<script>
	// #ifdef APP-NVUE
	const BindingX = uni.requireNativePlugin('bindingx');
	const animation = uni.requireNativePlugin('animation');
	// #endif

	import {
		mapState
	} from 'vuex'
	export default {
		data() {
			return {
				systemInfo: uni.getSystemInfoSync(),
				navBarTitle: '',
				scrollIntoID: 'chatID_0',
				toUid: 0,
				sessionId: '',
				session: [],
				footAnimationData: {},
				scrollAnimationData: {},
				menuAnimationData: {},
				nickname: '',
				petName: '',
				chatSrcollBottom: 0,
				KeyboardHeight: 0,
				safeBottom: 0,
				adjustPosition: true,
				msgList: [],
				msg: "",
				scrollTop: 0,
				srcollHeight: 0,
				showMore: false,
				showEmoji: false,
				defaultShowEmoji: false,
				voice: false,
				chatDetailHeight: 0,
				recorderManager: uni.getRecorderManager(),
				innerAudioContext: uni.createInnerAudioContext(),
				playVoiceAnimationIndex: '',
				onPlay: false,
				isVoice: false,
				voiceTis: '按住 说话',
				recordTis: "手指上滑 取消发送",
				recording: false,
				willStop: false,
				initPoint: {
					identifier: 0,
					Y: 0
				},
				recordTimer: null,
				recordLength: 0,
				chatDetailBoxMaxWidth: 0,
				page: 1,
				focus: false,
				refreshing: false,
				friendInfo: [],
				ready: false,
				isWxapp:false,
			}
		},
		destroyed() {
			this.webSocket.destoryChatObject();
		},
		onLoad(option) {
			this.safeBottom = this.systemInfo.safeAreaInsets.bottom > 0 ? this.systemInfo.safeAreaInsets.bottom : 0;
			this.KeyboardHeight = this.safeBottom * 2;
			this.sessionId = option.id;
			this.nickname = option.name;
			this.petName = this.$store.state.user.utils.getNickName(this.sessionId, this.nickname);
			this.navBarTitle = this.petName;
			this.chatDetailBoxMaxWidth = this.systemInfo.screenWidth - 110;
			this.recorderManager.onStart((e) => {
				this.recordBegin(e);
			})
			this.recorderManager.onStop((e) => {
				this.recordEnd(e);
			})
		},
		onShow() {
			// #ifndef  APP-NVUE
			this.isWxapp = true;
			// #endif
			this.onKeyboardHeight();
			uni.$on('onMessage', this.onMessage)
			this.safeBottom = this.systemInfo.safeAreaInsets.bottom > 0 ? this.systemInfo.safeAreaInsets.bottom : 0;
			this.KeyboardHeight = this.safeBottom * 2;
			this.petName = this.$store.state.user.utils.getNickName(this.sessionId, this.nickname);
			this.navBarTitle = this.petName;
			this.webSocket.readChatItem(this.sessionId);
			this.friendInfo = this.$store.state.user.utils.getFriendInfoById(this.sessionId);
			// #ifdef H5
			this.srcollHeight = this.systemInfo.windowHeight - 45 - 55;
			// #endif
			// #ifndef H5
			this.srcollHeight = this.systemInfo.screenHeight - this.systemInfo.statusBarHeight - 45 - this.safeBottom - 55;
			// #endif
			var that = this;
			if (this.ready) {
				let msgList = this.webSocket.getChatDetail(false, this.sessionId, 1);
				if (!msgList) {
					this.msgList = [];
				} else {
					this.msgList = msgList;
				}
				this.scrollBottom();
				this.defaultShowEmoji = true;
			}
			this.$nextTick(function() {
				that.getSession();
			})
		},
		onReady() {
			let msgList = this.webSocket.getChatDetail(false, this.sessionId, 1);
			if (!msgList) {
				this.msgList = [];
			} else {
				this.msgList = msgList;
			}
			this.scrollBottom();
			this.ready = true;
		},
		computed: {
			...mapState({
				user: state => state.user.user,
				webSocket: state => state.user.webSocket,
				sessionList: state => state.user.sessionList,
			}),
			chatBodyBottom() {
				return `height:${this.srcollHeight}px;`
			},
			computedClassContentVoice() {
				return function(index) {
					let r = this.playVoiceAnimationIndex === index ? '../../static/images/play.gif' :
						'../../static/images/audio3.png';
					return r
				}
			},
			computedStyleContentVoiceLength() {
				return function(length) {
					let l = length / 1000;
					let w = 70;
					if (parseInt(l) < 2) {
						w = 70;
					} else if (parseInt(l) < 3) {
						w = 75;
					} else if (parseInt(l) < 5) {
						w = 85;
					} else if (parseInt(l) < 7) {
						w = 95;
					} else if (parseInt(l) < 10) {
						w = 110;
					} else if (parseInt(l) < 15) {
						w = 130;
					} else if (parseInt(l) < 20) {
						w = 150;
					} else if (parseInt(l) < 30) {
						w = 180;
					} else {
						w = 200;
					}
					w = w * 2;
					return 'width:' + w + 'rpx;position: relative;align-items: center;';
				}
			}
		},
		onHide() {

		},
		methods: {

			onMessage: function(message) {
				console.log('[聊天页] 接收到聊天信息', message);
				if ((message.from_id === this.session.id && message.chat_type === 'user') || (message.chat_type === 'group' &&
						message.to_id === this.session.id)) {
					if (message.isremove !== 1) {
						let index = this.msgList.findIndex(item => item._id === message._id)
						if (index === -1) {
							this.msgList.push(message)
							this.scrollBottom();
						}
					}
				}
			},
			onKeyboardHeight: function() {
				uni.onKeyboardHeightChange(res => {
					this.translatePageTop(res.height);
					if (this.systemInfo.platform == "android") {
						if (res.height > 100) {
							this.chatSrcollBottom = res.height - this.safeBottom;
							//this.inputScroll();
							//this.translatePageTop(res.height);
						} else {
							this.chatSrcollBottom = 0;
						}
					} else {
						if (res.height > 300) {

							this.chatSrcollBottom = res.height - this.safeBottom;
							//this.translatePageTop(res.height);
						} else {
							this.chatSrcollBottom = 0;
						}
					}
					if (res.height === 0) {
						//this.translatePageBottom();
						this.focus = false;
					}
					this.scrollBottom();
				})
			},
			onrefresh: function(event) {

				this.refreshing = true
				var that = this;

				setTimeout(() => {
					let page = that.page + 1;

					let msgList = that.webSocket.getChatDetail(false, that.sessionId, page);
					let oldMsgList = that.msgList;
					if (msgList.length) {
						that.page = page;
						that.msgList.unshift(...msgList)

						that.scrollIntoID = "chatId_" + msgList.length;
					}
					that.refreshing = false
				}, 2000)



			},
			onpullingdown: function(event) {

			},
			translatePageTop: function(h) {

				// #ifndef  APP-NVUE
				var scrollAnimation = uni.createAnimation({
					duration: 220,
					timingFunction: 'ease',
				})
				 
				var footAnimation = uni.createAnimation({
					duration: 220,
					timingFunction: 'ease',
				})
				if(h == 0){
					scrollAnimation.translateY(-h).step()
					footAnimation.translateY(-h).step()
				}else{
					scrollAnimation.translateY(-h + 34).step()
					footAnimation.translateY(-h + 34).step()
				}
				 
				
				this.scrollAnimationData = scrollAnimation.export()
				this.footAnimationData = footAnimation.export()
				 
				// #endif

				// #ifdef  APP-NVUE
				let foot = this.getEl(this.$refs.foot);
				let scrollview = this.getEl(this.$refs.scrollview);
				h = h - this.safeBottom;
				animation.transition(scrollview, {
					styles: {
						transform: 'translateY(-' + h + ')',
					},
					duration: 220, //ms
					timingFunction: 'linear',
					needLayout: false,
					delay: 0 //ms
				}, function() {

				})
				animation.transition(foot, {
					styles: {
						transform: 'translateY(-' + h + ')',
					},
					duration: 220, //ms
					timingFunction: 'linear',
					needLayout: false,
					delay: 0 //ms
				}, function() {

				})
				// #endif



			},
			more: function() {
				uni.hideKeyboard();
				uni.navigateTo({
					url: '/pages/contact/more?id=' + this.session._id + '&nickname=' + this.petName
				})
			},
			showTime: function(time, index) {
				var last_index = index - 1;
				if (last_index >= 0) {
					var last_time = this.msgList[last_index]['create_time'];
					var difference = parseInt(time.toString().slice(0, -3)) - parseInt(last_time.toString().slice(0, -3));
					if (difference < 60) {
						return false;
					} else {
						return this.$store.state.user.utils.formatChatTime(time)
					}
				} else {
					return this.$store.state.user.utils.formatChatTime(time)
				}
			},
			getSession: function() {
				let sessionList = this.sessionList;
				sessionList = sessionList ? sessionList : [];
				let index = sessionList.findIndex(item => item.id === this.sessionId)
				if (index === -1) {
					var that = this;
					uniCloud.callFunction({
						name: 'user',
						data: {
							$url: "getUserByUid",
							token: this.$store.state.user.user_token,
							data: {
								uid: this.sessionId
							}
						},
					}).then((res) => {
						if (res.result.data.length) {
							this.session.id = res.result.data[0]._id;
							this.session.name = res.result.data[0].nickname;
							//this.session.username = res.result.data[0].username;
							this.session.avatar = res.result.data[0].avatar;
							this.session.chat_type = 'user';
							this.webSocket.createChatObject(this.session);

						} else {
							uni.showToast({
								title: '该用户不存在',
								duration: 2000,
								icon: 'none'
							});
						}

					}).catch((err) => {
						uni.hideLoading()
						console.log(err);
						uni.showModal({
							title: '提示',
							content: err
						});
					})

				} else {
					this.session = sessionList[index];
					this.webSocket.createChatObject(this.session);
				}

				this.updateSession();
			},
			async updateSession() {
				let sessionList = this.sessionList;
				sessionList = sessionList ? sessionList : [];
				let index = sessionList.findIndex(item => item.id === this.sessionId)
				if (index !== -1) {
					var that = this;
					uniCloud.callFunction({
						name: 'user',
						data: {
							$url: "getUserByUid",
							token: this.$store.state.user.user_token,
							data: {
								uid: this.sessionId
							}
						},
					}).then((res) => {

						let session = sessionList[index];
						session.name = res.result.data[0].nickname;
						session.avatar = res.result.data[0].avatar;
						let where = {
							id: that.sessionId,
							chat_type: 'user'
						};
						that.webSocket.updateChatItem(where, session)

					}).catch((err) => {})
				}
			},
			inputScroll: function() {
				let foot = this.getEl(this.$refs.foot);
				if (this.chatSrcollBottom) {
					var translateY = -10;
				} else {
					var translateY = 0;
				}
				let translateFoot = BindingX.bind({
					eventType: 'timing',
					exitExpression: 't>1',
					props: [{
						element: foot,
						property: 'transform.translateY',
						expression: 'easeInOutSine(t,0,' + translateY + ',1)'
					}]
				}, (res) => {
					if (res.state === 'exit') {
						BindingX.unbind({
							token: translateFoot
						})
					}
				});
			},
			scrollBottom: function() {
				var that = this;
				setTimeout(() => {
					if (that.msgList.length) {
						if (that.scrollIntoID == "chatId_" + (that.msgList.length - 1)) {
							that.scrollIntoID = "chatId_" + (that.msgList.length - 2);
							that.scrollBottom();
						} else if (that.scrollIntoID == "chatId_" + (that.msgList.length - 2)) {
							that.scrollIntoID = "chatId_" + (that.msgList.length - 1);
						} else {
							that.scrollIntoID = "chatId_" + (that.msgList.length - 1);
						}
					} else {
						that.scrollIntoID = "chatId_0";
					}
				}, 50)
			},
			switchVoice: function() {
				this.voice = this.voice ? false : true;
			},
			voiceBegin: function(e) {
				if (e.touches.length > 1) {
					return;
				}
				this.initPoint.Y = e.touches[0].pageY;
				this.initPoint.identifier = e.touches[0].identifier;
				this.recorderManager.start({
					format: "mp3"
				});
			},
			//录音开始UI效果
			recordBegin: function(e) {
				this.recording = true;
				this.voiceTis = '松开 结束';
				this.recordLength = 0;
				this.recordTimer = setInterval(() => {
					this.recordLength++;
				}, 1000)
			},
			// 录音被打断
			voiceCancel: function() {
				uni.hideLoading();
				this.recording = false;
				this.voiceTis = '按住 说话';
				this.recordTis = '手指上滑 取消发送'
				this.willStop = true; //不发送录音
				this.recorderManager.stop(); //录音结束
			},
			// 录音中(判断是否触发上滑取消发送)
			voiceIng: function(e) {
				if (!this.recording) {
					return;
				}
				let touche = e.touches[0];
				if (this.initPoint.Y - touche.pageY >= uni.upx2px(100)) {
					this.willStop = true;
					this.recordTis = '松开手指 取消发送'
					console.log("取消录音")
				} else {
					this.willStop = false;
					this.recordTis = '手指上滑 取消发送'
				}
			},
			// 结束录音
			voiceEnd: function(e) {
				if (!this.recording) {
					return;
				}
				uni.hideLoading();
				this.recording = false;
				this.voiceTis = '按住 说话';
				this.recordTis = '手指上滑 取消发送'
				this.recorderManager.stop(); //录音结束
			},
			//录音结束(回调文件)
			recordEnd: function(e) {
				clearInterval(this.recordTimer);
				if (!this.willStop) {
					var that = this;
					uni.getFileInfo({
						filePath: e.tempFilePath,
						success: function(file) {
							let msg = {
								length: "0",
								duration: that.recordLength * 1000,
								tempFilePath: e.tempFilePath,
								fileSize: file.size
							}
							let min = parseInt(that.recordLength / 60);
							let sec = that.recordLength % 60;
							min = min < 10 ? '0' + min : min;
							sec = sec < 10 ? '0' + sec : sec;
							that.uploadAudio(msg);
						}
					})
				} else {
					console.log('取消发送录音', e);
				}
				this.willStop = false;
			},

			//隐藏键盘
			hideKey: function() {
				uni.hideKeyboard()
				this.inputFocus();
			},
			//ref
			getEl: function(el) {
				if (typeof el === 'string' || typeof el === 'number') return el;
				if (WXEnvironment) {
					return el.ref;
				} else {
					return el instanceof HTMLElement ? el : el.$el;
				}
			},
			collapse: function() {
				
				
				// #ifndef  APP-NVUE
				let move = uni.upx2px(180);
				var menuAnimation = uni.createAnimation({
					duration: 220,
					timingFunction: 'ease',
				})
				if(!this.showMore){
					menuAnimation.translateX(-move).step()
				}else{
					menuAnimation.translateX(0).step()
				}
 
				this.menuAnimationData = menuAnimation.export()
				 
				// #endif
				
				// #ifdef  APP-NVUE
				let moreMenu = this.getEl(this.$refs.moreMenu);
				let move = uni.upx2px(180);
				if (!this.showMore) {
					animation.transition(moreMenu, {
						styles: {
							transform: 'translateX(-' + move + ')',
						},
						duration: 300, //ms
						timingFunction: 'linear',
						needLayout: false,
						delay: 0 //ms
					}, function() {

					})
				} else {
					animation.transition(moreMenu, {
						styles: {
							transform: 'translateX(0)',
						},
						duration: 300, //ms
						timingFunction: 'linear',
						needLayout: false,
						delay: 0 //ms
					}, function() {

					})
				}
				// #endif
				
				this.showMore = !this.showMore
				//this.inputFocus()
			},
			showEmojiClick: function() {

				let duration = 400;
				console.log("showEmojiClick")
				console.log(this.showEmoji)
				uni.hideKeyboard()
				let main_chatDetail = this.getEl(this.$refs.chatDetail);
				let main_foot = this.getEl(this.$refs.foot);
				this.emojiList = emoji
				if (!this.showEmoji) {
					this.voice = false;
					this.adjustPosition = true;
					let move = uni.upx2px(380);

					let translateFoot = BindingX.bind({
						eventType: 'timing',
						exitExpression: 't>' + duration,
						props: [{
								element: main_foot,
								property: 'transform.translateY',
								expression: 'easeInOutSine(t,0,-' + move + ',' + duration + ')'
							},
							{
								element: main_chatDetail,
								property: 'transform.translateY',
								expression: 'easeInOutSine(t,0,-' + move + ',' + duration + ')'
							}
						]
					}, (res) => {

						if (res.state === 'exit') {
							BindingX.unbind({
								token: translateFoot
							})
						}
					});
					this.showEmoji = true;

				} else {
					this.adjustPosition = true;
					this.hideEmojiPanel();
				}

			},
			inputFocus: function() {
				var that = this;
				
				// #ifndef  APP-NVUE
				 
				
				if (this.showMore) {
					let move = uni.upx2px(180);
					var menuAnimation = uni.createAnimation({
						duration: 220,
						timingFunction: 'ease',
					})
					menuAnimation.translateX(0).step()
					 
					this.menuAnimationData = menuAnimation.export()
					this.showMore = false;
				}
				 
				// #endif
				
				
				// #ifdef  APP-NVUE
				if (this.showEmoji) {
					let main_chatDetail = this.getEl(this.$refs.chatDetail);
					let main_foot = this.getEl(this.$refs.foot);
					uni.hideKeyboard()
					this.hideEmojiPanel();
				} else {
					this.adjustPosition = true;
				}
				if (this.showMore) {
					let moreMenu = this.getEl(this.$refs.moreMenu);
					animation.transition(moreMenu, {
						styles: {
							transform: 'translateX(0)',
						},
						duration: 400, //ms
						timingFunction: 'linear',
						needLayout: false,
						delay: 0 //ms
					}, function(res) {
						that.scrollBottom();
					})
					this.showMore = false;
				}
				// #endif
			},
			 
			hideEmojiPanel: function() {
				var that = this;
				let duration = 400;
				let main_chatDetail = this.getEl(this.$refs.chatDetail);
				let main_foot = this.getEl(this.$refs.foot);
				let move = uni.upx2px(380);
				let translateFoot = BindingX.bind({
					eventType: 'timing',
					exitExpression: 't>' + duration,
					props: [{
							element: main_foot,
							property: 'transform.translateY',
							expression: 'easeInOutSine(t,-' + move + ',' + move + ',' + duration + ')'
						},
						{
							element: main_chatDetail,
							property: 'transform.translateY',
							expression: 'easeInOutSine(t,-' + move + ',' + move + ',' + duration + ')'
						}
					]
				}, (res) => {

					if (res.state === 'exit') {
						BindingX.unbind({
							token: translateFoot
						})
					}
				});
				this.adjustPosition = true;
				this.showEmoji = false;
			},
			playAudio: function(data, index) {
				this.playVoiceAnimationIndex = "";
				this.innerAudioContext.src = "";
				try {
					var that = this;
					let mp3Url = data.file;
					if (that.onPlay) {
						that.innerAudioContext.stop();
						that.onPlay = false;
						that.playVoiceAnimationIndex = "";
					} else {
						that.innerAudioContext.src = mp3Url;
						that.innerAudioContext.play();
						that.innerAudioContext.onPlay(() => {
							console.log('开始播放');
							that.onPlay = true;
							that.playVoiceAnimationIndex = index;
						});
						that.innerAudioContext.onEnded(() => {
							console.log('自然播放结束');
							that.onPlay = false;
							that.playVoiceAnimationIndex = "";
						});
						that.innerAudioContext.onStop(() => {
							console.log('onStop');
							that.onPlay = false;
							that.playVoiceAnimationIndex = "";
						});
						that.innerAudioContext.onError((res) => {
							console.log(res.errMsg);
							console.log(res.errCode);
							that.onPlay = false;
							that.playVoiceAnimationIndex = "";
						});
					}
				} catch (err) {
					console.log(err)
					that.onPlay = false;
					that.playVoiceAnimationIndex = "";
				}
			},
			chooseImage: function() {
				this.inputFocus();
				var that = this;
				uni.chooseImage({
					count: 1, //默认9
					sizeType: ['original', 'compressed'], //可以指定是原图还是压缩图，默认二者都有
					sourceType: ['album'], //从相册选择
					success: function(res) {
						that.uploadImage(res.tempFilePaths[0]);
					}
				});
			},
			captureImage: function() {
				this.inputFocus();
				var that = this;
				var cmr = plus.camera.getCamera();
				var res = cmr.supportedImageResolutions[0];
				var fmt = cmr.supportedImageFormats[0];
				cmr.captureImage(function(path) {
						that.uploadImage(path);
					},
					function(error) {}, {
						resolution: res,
						format: fmt
					}
				);
			},
			setEmojiMsg: function(index, key) {
				var emojiList = emoji;
				this.msg = this.msg + emoji[index][key];
			},
			//发文字
			sendMsg: function() {
				if (this.msg != "") {
					let message = this.webSocket.formatSendData({
						type: 'say',
						data: this.msg,
						to_id: this.session.id, // 接收人/群 id
						to_name: this.session.name, // 接收人/群 名称
						to_avatar: this.session.avatar, // 接收人/群 头像
						chat_type: this.session.chat_type, // 接收类型
						msg_type: 'text'
					})
					this.webSocket.send(message);
					message.isSend = true;
					this.msgList.push(message)
					this.scrollBottom();
					this.msg = ""
				}
			},
			previewImage: function(image) {
				let images = [];
				images.push(image)
				uni.previewImage({
					urls: images,
					longPressActions: {
						itemList: ['发送给朋友', '保存图片', '收藏'],
						success: function(data) {
							console.log('选中了第' + (data.tapIndex + 1) + '个按钮,第' + (data.index + 1) + '张图片');
						},
						fail: function(err) {
							console.log(err.errMsg);
						}
					}
				});
			},
			uploadImage: function(file) {
				var that = this;
				new Promise((resolve, reject) => {
					const path = file
					const options = {
						filePath: path,
						cloudPath: Date.now() + '.jpg'
					}
					resolve(options)
				}).then((options) => {
					uni.showLoading({
						title: '发送中...'
					})
					return uniCloud.uploadFile({
						...options,
						onUploadProgress(e) {
							console.log(e)
						}
					})
				}).then(res => {
					if (res.fileID.indexOf("cloud://") != -1) {
						uniCloud.getTempFileURL({
							fileList: [res.fileID],
							success(res) {
								if (res.fileList != undefined && res.fileList[0] != undefined) {
									that.sendImage(res.fileList[0].tempFileURL)
								}
							},
							fail() {},
							complete() {
								uni.hideLoading()
							}
						});
					} else {
						that.sendImage(res.fileID)
					}
				}).catch((err) => {
					uni.hideLoading()
					console.log(err);
					if (err.message !== 'Fail_Cancel') {

					}
				})
			},
			uploadAudio: function(data) {
				var that = this;
				new Promise((resolve, reject) => {
					const path = data.tempFilePath
					const options = {
						filePath: path,
						cloudPath: Date.now() + '.mp3'
					}
					resolve(options)
				}).then((options) => {
					uni.showLoading({
						title: '发送中...'
					})
					return uniCloud.uploadFile({
						...options,
						onUploadProgress(e) {
							console.log(e)
						}
					})
				}).then(res => {
					if (res.fileID.indexOf("cloud://") != -1) {

						uniCloud.getTempFileURL({
							fileList: [res.fileID],
							success(res) {
								if (res.fileList != undefined && res.fileList[0] != undefined) {
									data.file = res.fileList[0].tempFileURL;
									that.sendAudio(data);
								}
							},
							fail() {},
							complete() {
								uni.hideLoading()
							}
						});

					} else {
						data.file = res.fileID;
						that.sendAudio(data);
					}


				}).catch((err) => {
					uni.hideLoading()
					console.log(err);
					if (err.message !== 'Fail_Cancel') {


					}
				})
			},
			sendImage: function(image) {
				if (image) {
					let message = this.webSocket.formatSendData({
						type: 'say',
						data: image,
						to_id: this.session.id, // 接收人/群 id
						to_name: this.session.name, // 接收人/群 名称
						to_avatar: this.session.avatar, // 接收人/群 头像
						chat_type: this.session.chat_type, // 接收类型
						msg_type: 'image'
					})

					this.webSocket.send(message);
					message.isSend = true;
					this.msgList.push(message)
					this.scrollBottom();

				}
			},
			sendAudio: function(file) {
				console.log(file)
				if (file) {
					let message = this.webSocket.formatSendData({
						type: 'say',
						data: file,
						to_id: this.session.id, // 接收人/群 id
						to_name: this.session.name, // 接收人/群 名称
						to_avatar: this.session.avatar, // 接收人/群 头像
						chat_type: this.session.chat_type, // 接收类型
						msg_type: 'audio'
					})

					this.webSocket.send(message);
					message.isSend = true;
					this.msgList.push(message)
					this.scrollBottom();

				}
			}
		}
	}
</script>

<style lang="scss" scoped>
	.scroll-view {
		width: 750rpx;
		background-color: #e3e3e3;
	}

	.record {
		position: fixed;
		bottom: 150px;
		width: 350rpx;
		left: 200rpx;
		height: 350rpx;
		background-color: #4c4c4c;
		border-radius: 20rpx;
		justify-content: center;
		align-items: center;

	}

	.tis {
		width: 100%;
		height: 10vw;

		justify-content: center;
		font-size: 24rpx !important;
		color: white !important;
	}

	.ing {
		width: 100%;

	}

	.voice-icon {

		font-size: 120rpx;
		color: #f09b37;
		// color: white;
	}

	.header-dh {
		position: fixed;
		justify-content: flex-end;
		padding-bottom: 15rpx;
		width: 750rpx;
		background-color: #f1f1f1;
		z-index: 20;
	}

	.padding-chat {
		padding: 22rpx;
	}

	.margin-right {
		margin-right: 20rpx;
	}

	.margin-left {
		margin-left: 20rpx;
	}

	.padding-left {
		padding-left: 20rpx;
	}

	.flex-column-start {
		flex-direction: column;
		justify-content: center;
	}

	.chat-img {
		border-radius: 10rpx;
		width: 85rpx;
		height: 85rpx;
		background-color: #FFFFFF;
	}

	.flex-row-around {
		flex-direction: row;
		justify-content: space-around;
		align-items: center;
	}

	.flex-row-between {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
	}

	.status_bar-fixed {
		width: 750rpx;
		background-color: #f1f1f1;
		z-index: 20;
	}

	.center-box {
		width: 720rpx;
		padding-left: 25rpx;
	}

	.dh-input {
		font-size: 30rpx;
		/* #ifdef H5 */
		width: 610rpx;
		/* #endif */
		/* #ifndef H5 */
		width: 560rpx;
		/* #endif */
		height: 70rpx;
		border-radius: 10rpx;
		padding-left: 15rpx;
		background-color: #FFFFFF;
		/* #ifdef H5 */
		margin-left: 40rpx;
		/* #endif */
		
		
		
	}

	.voice-nv {
		font-size: 34rpx;
		width: 560rpx;
		height: 70rpx;
		font-weight: bold;
		border-radius: 10rpx;
		padding-left: 15rpx;
		padding-top: 17rpx;
		background-color: #FFFFFF;
		text-align: center;
		color: #333333;
	}

	.tb-nv {
		width: 50rpx;
		height: 50rpx;
	}

	.wid {
		width: 480rpx;
	}

	.box-normal {
		width: 750rpx;
		height: 0;
		background-color: #FFFFFF;
	}

	.flex-row-around {
		flex-direction: row;
		justify-content: space-around;
		align-items: center;
		flex-wrap: wrap;
	}

	.tb-text {
		flex-direction: column;
		justify-content: center;
		align-items: center;
	}

	.flex-column-center {
		flex-direction: column;
		justify-content: center;
		align-items: center;
		position: fixed !important;
		background-color: #f3f3f3;
		border-radius: 10rpx;
		z-index: 9999999;
		/* #ifndef APP-NVUE */
		padding-bottom: constant(safe-area-inset-bottom);
		padding-bottom: env(safe-area-inset-bottom);
		/* #endif */
	}

	.safeArea {
		width: 750rpx;
		position: fixed;
		bottom: 0px;
		background-color: #f3f3f3;
	}


	.bottom-foot-char {
		background-color: #f1f1f1;
		//width: 750rpx;
		padding: 20rpx 0 20rpx 0;
		/* #ifndef APP-NVUE */
		flex-flow: row;
		/* #endif */
	}

	.padding-top {
		padding-top: 10rpx;
	}

	.padding-right {
		padding-right: 20rpx;
	}

	.justify-end {
		flex-direction: row-reverse;
	}

	.nv-chat {
		flex-wrap: wrap-reverse;
	}

	.nv-row {
		flex-direction: row
	}

	.nv-rowever {
		flex-direction: row-reverse
	}

	.white-bg {
		background-color: #95eb67;
	}

	.gr-bg {
		background-color: #ffffff;
	}

	.long-text {
		color: #ffffff;
		font-size: 28rpx;
		padding: 8 20rpx;
	}

	.more-layer {
		height: 220rpx;
		border-top-width: 2rpx;
		border-top-color: #e6e5e8;
	}


	.more-layer-list {
		flex-direction: row;
	}

	.more-layer-large {
		flex-direction: column;
		justify-content: center;
		align-items: center;
	}



	.more-layer-span {
		font-size: 28rpx;
		color: gray;

	}

	.more-layer-box {
		width: 120rpx;
		height: 120rpx;
		border-radius: 20rpx;
		background-color: white;
		justify-content: center;
		align-items: center;
		margin: 20rpx 30rpx 20rpx 30rpx;
	}


	.emoji-layer {
		height: 500rpx;
		width: 750rpx;
		flex-wrap: wrap;
		border-top-width: 2rpx;
		border-top-color: #e6e5e8;
		// position: absolute;

	}

	.emoji-layer-list {
		flex-direction: row;
		width: 100%;
		justify-content: center;
		align-items: center;

	}

	.emoji-layer-large {
		width: 46rpx;
		height: 46rpx;
	}

	.chat-time {
		text-align: center;
		padding-top: 18rpx;
		font-size: 28rpx;
		color: #8f8f8f;
		margin-bottom: 20rpx;
	}

	.system-msg {
		text-align: center;
		padding-top: 18rpx;
		font-size: 24rpx;
		color: #8f8f8f;
	}

	.ing {
		top: 50rpx;
		position: absolute;
		text-align: center;
		justify-content: center;
		align-items: center;
	}

	.recording {
		width: 150rpx;
		height: 150rpx;
	}

	.recordTis {
		bottom: 50rpx;
		position: absolute;
		text-align: center;
		justify-content: center;
	}

	.recordTis-text {
		color: white;
		font-size: 30rpx;
	}

	.scroll-view_H {
		flex-direction: row;
		padding-top: 60rpx;
		padding-bottom: 60rpx;
		height: 380rpx;
		width: 750rpx;
		flex-wrap: wrap;
	}

	.refresh {
		width: 750rpx;
		align-items: center;
	}

	.indicator-text {
		color: #888888;
		text-align: center;
		font-size: 28rpx;
		margin-bottom: 10rpx;
	}

	.indicator {
		padding-top: 2rpx;
		padding-bottom: 32rpx;
		height: 60rpx;
		width: 60rpx;
		color: #888888;
	}
</style>
